function [Y, Y_w] = vl_myfrmap(X, W, dzdy)
%full rank mapping (FRMap) layer
% VL_MYFRMAP 全秩映射（FRMap）层
% 
% 该函数实现了神经网络中全秩映射层的前向传播和反向传播。
%
% 输入：
%   - X：输入数据
%   - W：权重矩阵
%   - dzdy：损失函数对该层输出的导数
%
% 输出：
%   - Y：输出数据
%   - Y_w：损失函数对权重矩阵的梯度


[n1,n2,n3,n4] = size(X);
[n7, n6, n5] = size(W);
Y = zeros(n7,n2,n3,n5);

% 如果没有提供 dzdy，则执行前向传播
if nargin < 3    
    for ix = 1  : n3
        for iw = 1 : n5
            if n4 == 1
                % 执行逐元素的矩阵乘法
                Y(:,:,ix,iw) = W(:,:,iw)*X(:,:,ix);
            else
                % 执行逐元素的矩阵乘法
                Y(:,:,ix,iw) = W(:,:,iw)*X(:,:,ix,iw);
            end
        end
    end

else
    %这部分代码处理反向传播。首先初始化梯度矩阵Y_w和输出Y。
    % 然后，对每个输入和权重批次，计算损失函数对权重矩阵的梯度Y_w
    % 和损失函数对输入数据的导数Y。
    % 具体来说，如果输入数据的第四维n4为1，
    % 说明只有一个通道或者不区分通道，这时所有权重共享同一个输入数据，
    % 因此输出Y和权重梯度Y_w需要通过累加不同权重的贡献来计算。
    % 否则，每个权重独立处理各自对应的输入数据。

    %-----------------
    %在这段代码中，反向传播计算分为两种情况处理：当n4为1时，
    % 表示所有的权重矩阵都作用在相同的输入上，
    % 因此在计算过程中，权重的贡献是累加的，这通常用于全连接层或单通道输入。
    % 而当n4不为1时，每个权重矩阵对应于输入的不同部分或不同通道，
    % 因此对每个权重矩阵独立处理。
    %这种设计使得vl_myfrmap函数非常灵活，能够适应不同的网络层需求，
    % 特别是在处理多通道输入或需要分别计算每个通道梯度的情况。
    % 此外，通过在没有第四维的情况下进行归一化，
    % 确保了梯度的计算不会因为权重数量的增加而放大，
    % 有助于保持网络训练的稳定性。
    %----------------------


    Y_w = zeros(n7, n6, n5);  % 初始化损失函数对权重矩阵的梯度
    Y = zeros(n1,n2,n3,n4);  % 初始化输出数据
    % 执行反向传播
    for ix = 1  : n3
        for iw = 1 : n5
            d_t = dzdy(:,:,ix,iw);
            if n4 == 1
                % 反向传播时，计算权重转置和上层导数的乘积累加到输出梯度
                Y(:,:,ix) = Y(:,:,ix)+ W(:,:,iw)'*d_t; 
                % 计算损失函数对权重矩阵的梯度
                Y_w(:,:,iw) = Y_w(:,:,iw)+d_t*X(:,:,ix)';
            else
                % 对每个独立的输入和权重计算输出梯度
                Y(:,:,ix,iw) = W(:,:,iw)'*d_t; 
                % 计算损失函数对权重矩阵的梯度
                Y_w(:,:,iw) = Y_w(:,:,iw)+d_t*X(:,:,ix,iw)';
            end
        end
    end
    if n4 == 1
        % 如果输入数据没有第四维，那么输出梯度要除以权重批次数量n5，进行平均
        Y = Y/n5;   % 若 n4 == 1，则对 Y 进行归一化
    end
end

% vl_myfrmap函数是一个全秩映射（FRMap）层实现，用于在神经网络中执行前向传播和反向传播。这个函数特别适用于处理输入数据和权重矩阵的矩阵乘法，
% 支持多维数据和多批次处理，既适合于全连接层，也适合于需要特定权重处理的复杂层结构。
% 下面总结这个函数的关键特性和操作流程：
% 功能概述
% 
% 前向传播：在前向传播阶段，函数接收输入数据X和权重矩阵W，通过矩阵乘法计算得到输出Y。
% 这一过程支持多批次数据处理，允许权重矩阵与不同批次的输入数据分别相乘，适用于批处理操作和数据并行处理。

% 反向传播：在反向传播阶段，函数计算上游传递下来的梯度dzdy与权重矩阵和输入数据的关系，
% 从而得到对权重矩阵的梯度Y_w和对输入数据的梯度。这一计算帮助优化权重参数，更新网络以减小误差。
% 
% 主要操作
% 初始化与尺寸定义：函数首先确定输入数据和权重矩阵的维度，基于这些维度初始化输出数据Y和权重梯度Y_w的尺寸。
% 矩阵乘法执行：
% 前向：根据权重批次和输入批次，执行相应的矩阵乘法，生成输出Y。
% 反向：根据传入的导数dzdy，通过矩阵的转置操作计算输入数据的梯度和权重梯度。
% 内存管理：根据conserveMemory选项，函数可在计算后清除不再需要的中间数据，优化内存使用。
% 多批次与单批次处理：在单批次(n4 == 1)情况下，输出梯度需要在所有权重批次上平均，以防梯度计算被权重数量放大影响。


